El vector Tam tiene los números del 1 al 20, y los tamaños de los arrays que tenemos que probar van del 100 al 2000, añadiendo 100 elementos en cada iteracción, por lo que, en cada iteracción, el tamaño de los arrays es el del correspondiente elemento del vector Tam multiplicado por 100. Hay 20 iteracciones.
En cada iteracción, generamos un vector directo [1,2,3,4...], un vector inverso [..., 4,3,2,1],y un vector que genera números aleatorios.
Ordenamos cada vector aplicando el método de burbuja, de inserción, y de selección. 
Para cada caso, calculamos el tiempo que ha tardado, lo imprimimos por pantalla, y lo guardamos en su correspondiente vector de tiempos: 
-Vectores B para las ordenaciones de burbuja, I para las ordenaciones por inversión, y S para las ordenaciones por selección.
-Vectores 1 para los vectores directos, 2 para los vectores inversos, y 3 para los vectores aleatorios.

Podemos ver que los tiempos de los vectores inversos son mayores que los de los vectores derechos, ya que el vector inverso es en el que hay que hacer más pasos hasta ordenar el vector, porque está completamente al revés. Los tiempos de los vectores aleatorios son mayores que los de los vectores directos, pero algo menores que los de los inversos, porque no está completamente al revés, sino que es posible que haya algunos elementos ordenados, y hagan falta algunos pasos menos para ordenar el vector que en el caso de los vectores inversos.

En la gráfica, vemos una curva exponencial, lo cual es coherente con las funciones, porque, debido a la complejidad de estas, el tiempo crece de forma exponencial. Cuanto más largo sea un vector, más veces habrá que recorrerlo y más elementos habrá que comparar hasta terminar la ordenación.

¿Ecuaciones?

En el caso de la ordenación por MergeSort, vemos que el tiempo del vector inverso es un poco mayor que los tiempos del vector directo, pero, en este caso, los tiempos del vector aleatorio es mayor que los otros casos. Posiblemente, debido a que hay que dar muchos pasos para ordenar los elementos en un subvector, y luego volver a ordenarlos en un vector mayor al unirse subvectores.

En el caso de la ordenación por QuickSort, si intentamos ordenar un vector muy largo, da error, lo que puede significar que no es el método de ordenación más adecuado para vectores muy largos. Por tanto, los tiempos entre los diferentes vectores se diferencian muy poco. Para ordenar 100 elementos, los tiempos son más o menos los mismos que los de los primeros elementos (entre 0.001 y 0.01 segundos)

Viendo los tiempos, podemos ver que, para vectores de tamaño 2000, los algoritmos de burbuja, inserción y ordenación tardan hasta, más o menos, entre 0.2 segundos. En cambio, para el algoritmos mergesort, para ordenar vectores de 10000 elementos, los tiempos son de, más o menos, 0.02 segundos: mucho más rápido que los primeros métodos. Lo que indica que es mucho más eficiente, y lo que explica que los tiempos sean muy pequeños y sea difícil analizarlos, pero sabemos que es muy eficiente.